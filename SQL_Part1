--Created and run in SQL Server

DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(4),
  "extras" VARCHAR(4),
  "order_time" DATETIME
);

INSERT INTO customer_orders
  (order_id, customer_id, pizza_id, exclusions, extras, order_time)
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" VARCHAR(19),
  "distance" VARCHAR(7),
  "duration" VARCHAR(10),
  "cancellation" VARCHAR(23)
);

INSERT INTO runner_orders
  ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" TEXT
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');


--A. Pizza Metrics

--1.How many pizzas were ordered?

SELECT COUNT(order_id) AS NumPizzasOrdered
FROM pizza_runner.dbo.customer_orders;

--2. How many unique customer orders were made?

SELECT COUNT(DISTINCT order_id) AS NumofOrders
FROM pizza_runner.dbo.customer_orders;

--3. How many successful orders were delivered by each runner?

SELECT *
FROM pizza_runner.dbo.runner_orders;

UPDATE pizza_runner.dbo.runner_orders
SET cancellation = 'yes'
WHERE cancellation LIKE '%Cancellation';

UPDATE pizza_runner.dbo.runner_orders
SET cancellation = 'no'
WHERE cancellation = '';

UPDATE pizza_runner.dbo.runner_orders
SET cancellation = 'no'
WHERE cancellation IS NULL;

UPDATE pizza_runner.dbo.runner_orders
SET cancellation = 'no'
WHERE cancellation = 'null';

SELECT cancellation AS Order_Cancelled, COUNT(cancellation) AS Count 
FROM pizza_runner.dbo.runner_orders
GROUP BY cancellation;

--4. How many of each type of pizza was delivered?

ALTER TABLE pizza_runner.dbo.pizza_names
ALTER COLUMN pizza_name varchar(50);

SELECT pn.pizza_name AS Pizza, COUNT(co.pizza_id) AS Count
FROM pizza_runner.dbo.customer_orders AS co
INNER JOIN pizza_runner.dbo.pizza_names AS pn
ON co.pizza_id = pn.pizza_id
GROUP BY pn.pizza_name;

--5. How many Vegetarian and Meatlovers were ordered by each customer?

SELECT co.customer_id AS Customer, pn.pizza_name AS Pizza, COUNT(co.pizza_id) AS Count
FROM pizza_runner.dbo.customer_orders AS co
INNER JOIN pizza_runner.dbo.pizza_names AS pn
ON co.pizza_id = pn.pizza_id
GROUP BY co.customer_id, pn.pizza_name
ORDER BY co.customer_id;

--6. What was the maximum number of pizzas delivered in a single order?

SELECT co.order_id, COUNT(*) AS Count,
ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RN
FROM pizza_runner.dbo.customer_orders AS co
INNER JOIN pizza_runner.dbo.runner_orders AS rn
ON co.order_id = rn.order_id
WHERE rn.cancellation = 'no'
GROUP BY co.order_id
ORDER BY COUNT(*) DESC

WITH pizzas AS
(
SELECT co.order_id, COUNT(*) AS Count,
ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RN
FROM pizza_runner.dbo.customer_orders AS co
INNER JOIN pizza_runner.dbo.runner_orders AS rn
ON co.order_id = rn.order_id
WHERE rn.cancellation = 'no'
GROUP BY co.order_id
--ORDER BY COUNT(*) DESC
)

SELECT order_id, Count
FROM pizzas
WHERE RN = 1

--7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

SELECT *
FROM pizza_runner.dbo.customer_orders AS co

UPDATE pizza_runner.dbo.customer_orders
SET exclusions = 'none'
WHERE exclusions = ' '
OR exclusions = 'null'

UPDATE pizza_runner.dbo.customer_orders
SET extras = 'none'
WHERE extras = ' '
OR extras = 'null'
OR extras = 'NULL'
OR extras IS NULL

SELECT
	c.customer_id,
	sum(
		CASE
			WHEN c.exclusions <> 'none' 
				OR c.extras <> 'none' THEN 1
			ELSE 0
		END
	) AS has_changes,
	sum(
		CASE
			WHEN c.exclusions = 'none' 
				OR c.extras = 'none' THEN 1
			ELSE 0
		END
	) AS no_changes
FROM
	pizza_runner.dbo.customer_orders AS c
JOIN pizza_runner.dbo.runner_orders AS rn
ON c.order_id = rn.order_id
WHERE
	rn.cancellation = 'no'
GROUP BY
	c.customer_id
ORDER BY
	c.customer_id;
